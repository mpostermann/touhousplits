<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:TouhouSplits.UI.Converter">
    <conv:IsGreaterThanOrEqualConverter x:Key="IsGreaterThanOrEqualConverter"/>
    <Style x:Key="baseStyle">
        <Setter Property="Control.Background" Value="#172123"/>
        <Setter Property="Control.FontSize" Value="16"/>
        <Setter Property="Control.FontFamily" Value="Verdana"/>
        <Setter Property="Control.Foreground" Value="White"/>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" x:Key="gridStyle"/>
    <Style BasedOn="{StaticResource baseStyle}" x:Key="labelStyle"/>
    <Style BasedOn="{StaticResource baseStyle}" x:Key="listViewStyle"/>
    <Style BasedOn="{StaticResource baseStyle}" TargetType="{x:Type DataGridColumnHeader}" x:Key="tableHeaderStyle">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0.0" Color="#006592" />
                    <GradientStop Offset="1.0" Color="#28393d" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" TargetType="{x:Type DataGridRow}" x:Key="tableRowStyle">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="ItemsControl.Background" Value="#28393d"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" TargetType="{x:Type DataGridCell}" x:Key="tableCellStyle">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{Binding MyProperty}" />
    </Style>
    <Style BasedOn="{StaticResource tableCellStyle}" TargetType="{x:Type DataGridCell}" x:Key="tableScoreCellStyle">
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource IsGreaterThanOrEqualConverter}">
                        <Binding Path="RecordingScore" />
                        <Binding Path="PersonalBestScore" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter Property="Foreground" Value="#65f156"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" x:Key="scoreStyle">
        <Setter Property="Control.FontSize" Value="26"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding MainModel.IsNewPersonalBest}" Value="True">
                <Setter Property="Control.Foreground" Value="#65f156"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding MainModel.IsNewPersonalBest}" Value="False"/>
                    <Condition Binding="{Binding MainModel.IsPolling}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="#ff5d5d"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" TargetType="{x:Type Button}" x:Key="warningStyle">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Foreground" Value="Yellow"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="DarkGoldenrod"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource warningStyle}" TargetType="{x:Type Button}" x:Key="saveWarningStyle">
        <Style.Triggers>
            <DataTrigger Binding="{Binding FileModel.HasUnsavedChanges}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding FileModel.HasUnsavedChanges}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource warningStyle}" TargetType="{x:Type Button}" x:Key="pollingWarningStyle">
        <Style.Triggers>
            <DataTrigger Binding="{Binding MainModel.HasError}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding MainModel.HasError}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource baseStyle}" TargetType="{x:Type Button}" x:Key="clearWarningStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Height" Value="9"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>